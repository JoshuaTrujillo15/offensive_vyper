# @version ^0.3.2

"""
@title Ether Flash Loan Pool Exploit

TARGET: `contracts/ether_flash_loan/ether_pool.vy`

There's a new flash loan pool on the block. Users can provide Ether as
liquidity, and anyone can call the `flash_loan(uint256)` function. This
function transfers the `amount` to the `msg.sender`, calls `execute()` on the
`msg.sender`, then asserts the flash loan has been paid back by the end of the
transaction. They don't even charge fees! Drain the pool in a single
transaction.

Good Hacking.
"""

interface EtherPool:
	def deposits(address) -> uint256: view
	def deposit(): payable
	def withdraw(uint256): nonpayable
	def flash_loan(uint256): nonpayable
	def pay_back_flash_loan(): payable

target: address

@external
def __init__(target: address):
	self.target = target

# YOUR EXPLOIT HERE

